use serde::{Deserialize, Serialize};

use crate::discord::api::{ApiClient, API_MOUNT, API_CHANNELS, API_MESSAGE};
use crate::discord::channels;
use crate::discord::users;

use super::api::API_MESSAGES;

/*Structs */
#[derive(Deserialize, Serialize, Debug)]
pub struct Message {
    pub id:               String,
    pub channel_id:       String,
    pub guild_id:         Option<String>,
    pub author:           users::User,
    pub content:          String,
    pub timestamp:        String,
    pub edited_timestamp: Option<String>,
    pub tts:              bool,
    pub mention_everyone: bool,
    pub mentions:         Vec<users::User>,
    pub mention_roles:    Vec<String>,
    pub mention_channels: Option<Vec<channels::ChannelMention>>,
}

impl Message {
    pub async fn reply(&self, content: &str, api_client: ApiClient) {
        let reply_msg = ReplyMessage {
            content: content.to_string(),
            message_reference: MessageReference {
                message_id: Some(self.id.clone()),
                channel_id: Some(self.channel_id.clone()),
                guild_id: self.guild_id.clone(),
                fail_if_not_exists: None
            }
        };
        let reply = serde_json::json!(reply_msg);

        let _ = api_client.client
            .post(API_MOUNT.to_owned() + API_CHANNELS + self.channel_id.as_str() + API_MESSAGE)
            .json(&reply)
            .header("Authorization", "Bot ".to_owned() + &api_client.token)
            .send()
            .await;
    }

    pub async fn delete(&self, api_client: ApiClient) {
        let _ = api_client.client
            .delete(API_MOUNT.to_owned() + API_CHANNELS + self.channel_id.as_str() + API_MESSAGES + self.id.as_str())
            .header("Authorization", "Bot ".to_owned() + &api_client.token)
            .send()
            .await;
    }
}

/*
id	snowflake	id of the message
channel_id	snowflake	id of the channel the message was sent in
author*	user object	the author of this message (not guaranteed to be a valid user, see below)
content**	string	contents of the message
timestamp	ISO8601 timestamp	when this message was sent
edited_timestamp	?ISO8601 timestamp	when this message was edited (or null if never)
tts	boolean	whether this was a TTS message
mention_everyone	boolean	whether this message mentions everyone
mentions	array of user objects	users specifically mentioned in the message
mention_roles	array of role object ids	roles specifically mentioned in this message
mention_channels?***	array of channel mention objects	channels specifically mentioned in this message
attachments**	array of attachment objects	any attached files
embeds**	array of embed objects	any embedded content
reactions?	array of reaction objects	reactions to the message
nonce?	integer or string	used for validating a message was sent
pinned	boolean	whether this message is pinned
webhook_id?	snowflake	if the message is generated by a webhook, this is the webhook's id
type	integer	type of message
activity?	message activity object	sent with Rich Presence-related chat embeds
application?	partial application object	sent with Rich Presence-related chat embeds
application_id?	snowflake	if the message is an Interaction or application-owned webhook, this is the id of the application
message_reference?	message reference object	data showing the source of a crosspost, channel follow add, pin, or reply message
flags?	integer	message flags combined as a bitfield
referenced_message?****	?message object	the message associated with the message_reference
interaction?	message interaction object	sent if the message is a response to an Interaction
thread?	channel object	the thread that was started from this message, includes thread member object
components?**	array of message components	sent if the message contains components like buttons, action rows, or other interactive components
sticker_items?	array of message sticker item objects	sent if the message contains stickers
stickers?	array of sticker objects	Deprecated the stickers sent with the message
position?	integer	A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
role_subscription_data?	role subscription data object	data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
resolved?	resolved data	data for users, members, channels, and roles in the message's auto-populated select menus
*/


#[derive(Deserialize, Serialize, Debug)]
pub struct MessageReference {
    pub message_id: Option<String>,
    pub channel_id: Option<String>,
    pub guild_id: Option<String>,
    pub fail_if_not_exists: Option<bool>,
}
/*
message_id?	snowflake	id of the originating message
channel_id? *	snowflake	id of the originating message's channel
guild_id?	snowflake	id of the originating message's guild
fail_if_not_exists?	boolean	when sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true
*/


#[derive(Deserialize, Serialize, Debug)]
pub struct SendMessage {
    pub content: String,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct ReplyMessage {
    pub content: String,
    pub message_reference: MessageReference,
}